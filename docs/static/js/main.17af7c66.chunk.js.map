{"version":3,"sources":["components/AudioGraph.js","components/AudioComponent.js","components/AudioComponentList.js","components/Player.js","index.js"],"names":["audioContext","window","AudioContext","webkitAudioContext","destination","initialised","AudioGraph","baseNode","createOscillator","beatNode","this","lPanner","StereoPannerNode","pan","connect","rPanner","gainNode","createGain","suspend","start","frequency","offset","parseInt","Math","abs","sign","value","e","gain","parseFloat","AudioComponent","props","state","context","updateOscillators","changeGain","stopPlay","event","setState","target","className","style","type","min","max","step","onChange","bind","changeFrequency","changeOffset","Component","AudioComponentList","children","list","concat","push","key","length","onClick","addAudioComponent","Player","isPlaying","resume","onPlay","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.17af7c66.chunk.js","sourcesContent":["/*\r\n    This file contains the code of the frequency beat generator.\r\n    author: @yashdiniz;\r\n    reference: MDN\r\n*/\r\n\r\n// choose AudioContext depending on its existence...\r\n// legacy browsers have it in webkit\r\n// these have to be singleton!\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioContext = new AudioContext();\r\nconst destination = audioContext.destination;\r\nlet initialised = false;    // flag to store singleton state init\r\n\r\nclass AudioGraph {\r\n    constructor() {\r\n        // each component will now have two oscillators,\r\n        // one playing the base frequency,\r\n        // and the other playing the offset frequency\r\n        const baseNode = audioContext.createOscillator();\r\n        const beatNode = audioContext.createOscillator();\r\n        this.baseNode = baseNode;\r\n        this.beatNode = beatNode;\r\n\r\n        const lPanner = new StereoPannerNode(audioContext, {pan: -1});\r\n        baseNode.connect(lPanner);\r\n        const rPanner = new StereoPannerNode(audioContext, {pan: +1});\r\n        beatNode.connect(rPanner);\r\n        const gainNode = audioContext.createGain();  \r\n        this.gainNode = gainNode;  \r\n\r\n        lPanner.connect(gainNode);\r\n        rPanner.connect(gainNode);\r\n        gainNode.connect(destination);\r\n        \r\n        if(!initialised) {\r\n            audioContext.suspend(); // prevent the context from starting\r\n            initialised = true;\r\n        } \r\n        baseNode.start();       // until a user action triggers it.\r\n        beatNode.start();\r\n    }\r\n    updateOscillators(frequency, offset) {\r\n        try {        \r\n            frequency = parseInt(frequency); offset = parseInt(offset);\r\n            if(frequency < 20) frequency = 20;\r\n            else if(frequency > 20000) frequency = 20000;\r\n            if(Math.abs(offset) > 60) offset = Math.sign(offset) * 60;\r\n            this.baseNode.frequency.value = frequency; // use a number input, in hertz\r\n            this.beatNode.frequency.value = frequency + offset;  // use a range slider (+-60Hz)\r\n        } catch(e) {\r\n            audioContext.suspend();\r\n            throw e;\r\n        }\r\n        return {frequency, offset};\r\n    }    \r\n    changeGain(gain) {\r\n        gain = parseFloat(gain);\r\n        if(gain < 0 || gain > 1) gain = 0.5;\r\n        return this.gainNode.gain.value = gain;  // use a volume slider for the entire component\r\n    }\r\n}\r\n\r\nexport {\r\n   audioContext, AudioGraph\r\n};","import React, { Component } from 'react';\r\nimport { AudioGraph } from './AudioGraph';\r\n\r\nclass AudioComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gain: this.props.gain,\r\n            frequency: this.props.frequency,\r\n            offset: this.props.offset,\r\n            context: new AudioGraph()   // couldn't use this.context\r\n        };\r\n        this.state.context.updateOscillators(this.props.frequency, this.props.offset);    // default\r\n        this.state.context.changeGain(this.props.gain);    // default\r\n    }\r\n    // make sure the audio is initiated only by user action\r\n    // i.e. suspend audio when a new component is mounted,\r\n    // so that it starts ONLY when user presses play!\r\n    componentDidMount() { this.props.stopPlay() }\r\n    componentWillUnmount() { this.props.stopPlay() }\r\n    updateOscillators() {\r\n        try {\r\n            this.state.context.updateOscillators(this.state.frequency, this.state.offset);\r\n        } catch(e) {\r\n            this.props.stopPlay()\r\n        }\r\n    }\r\n    changeFrequency(event) {\r\n        this.setState({ frequency: event.target.value }, this.updateOscillators);\r\n    }\r\n    changeOffset(event) {\r\n        this.setState({ offset: event.target.value }, this.updateOscillators);\r\n    }\r\n    changeGain(event) {\r\n        this.setState({ gain: event.target.value }, \r\n            () => this.state.context.changeGain(this.state.gain)\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"player frui-panel\"\r\n        style={{\r\n            'display': 'flex',\r\n            'justifyContent':'space-evenly',\r\n            'minWidth': '600px'\r\n        }}\r\n        >\r\n            <div style={{'padding':'20px'}}>\r\n            <label>\r\n                Volume: {this.state.gain}\r\n            </label>\r\n            <br/>\r\n            <input \r\n                type=\"range\"\r\n                min=\"0\" max=\"1\"\r\n                style={{'margin': '5px'}}\r\n                step=\"0.01\" value={this.state.gain}\r\n                onChange={this.changeGain.bind(this)}\r\n            />\r\n            <br/>\r\n            </div>\r\n            <div style={{'padding':'20px'}}>\r\n            <label>\r\n                Base Frequency\r\n            </label>\r\n            <br/>\r\n            <input\r\n                type=\"number\"\r\n                min=\"20\" max=\"20000\"\r\n                style={{'margin': '5px'}}\r\n                value={this.state.frequency}\r\n                onChange={this.changeFrequency.bind(this)}\r\n            />\r\n            </div>\r\n            <div style={{'padding':'20px'}}>\r\n            <label>\r\n                Offset: {this.state.offset}\r\n            </label>\r\n            <br/>\r\n            <input \r\n                type=\"range\"\r\n                min=\"-60\" max=\"60\" \r\n                 style={{'margin': '5px'}}\r\n                step=\"1\" value={this.state.offset}\r\n                onChange={event => this.changeOffset(event)}\r\n            />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default AudioComponent;","import React, { Component } from 'react';\r\nimport AudioComponent from './AudioComponent';\r\n\r\nclass AudioComponentList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // storing children as state to facilitate adding new components.\r\n        this.state = {\r\n            children: this.props.children\r\n        };\r\n    }\r\n\r\n    addAudioComponent(){\r\n        const list = [].concat(this.state.children);\r\n        list.push(\r\n            <AudioComponent \r\n                key={list.length} gain={0.1} frequency={880} offset={-5}\r\n                stopPlay={this.props.stopPlay.bind(this)}\r\n            />\r\n        );\r\n        this.setState({children: list}); \r\n    }\r\n\r\n    // TODO: work on add new AudioComponent button stub!\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.children}\r\n                <button\r\n                    className=\"frui-btn frui-btn--fab\"\r\n                    onClick={this.addAudioComponent.bind(this)}\r\n                >Add</button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AudioComponentList;","import React, { Component } from 'react';\r\n\r\nimport AudioComponent from './AudioComponent';\r\nimport AudioComponentList from './AudioComponentList';\r\nimport { audioContext as context, audioContext }  from './AudioGraph';\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPlaying: false\r\n        };\r\n    }\r\n    onPlay() {\r\n        this.setState({ isPlaying: !this.state.isPlaying },\r\n            () => this.state.isPlaying ? context.resume() : context.suspend()\r\n        );\r\n    }\r\n    stopPlay() {\r\n        audioContext.suspend(); // invoke in case of error\r\n        this.setState({ isPlaying: false });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button \r\n                    className=\"frui-btn frui-btn--primary frui-btn--large\"\r\n                    onClick={this.onPlay.bind(this)}\r\n                >\r\n                    {\r\n                        this.state.isPlaying ? \r\n                        \"Pause\" : // <i class=\"fa fa-pause\"/> : \r\n                        \"Play\" // <i class=\"fa fa-play\"/>\r\n                    }\r\n                </button>\r\n                <AudioComponentList stopPlay={this.stopPlay.bind(this)}>\r\n                    <AudioComponent \r\n                        key={0} gain={0.3} frequency={120} offset={20}\r\n                        stopPlay={\r\n                            this.stopPlay.bind(this)  // Beta wave\r\n                        }\r\n                    />\r\n                    <AudioComponent \r\n                        key={1} gain={0.3} frequency={220} offset={-10}\r\n                        stopPlay={\r\n                            this.stopPlay.bind(this)  // Alpha wave\r\n                        }\r\n                    />\r\n                    <AudioComponent \r\n                        key={2} gain={0.2} frequency={420} offset={-5}\r\n                        stopPlay={\r\n                            this.stopPlay.bind(this)  // Theta wave\r\n                        }\r\n                    />\r\n                </AudioComponentList>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Player from './components/Player';\r\n\r\nfunction App() {\r\n    return (\r\n        <Player/>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}